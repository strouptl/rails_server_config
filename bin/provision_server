#!/bin/bash

echo "Is this a production server [true/false]?"
read production

if [[ $production == true ]]; then
  echo "Is this a web server, a worker, or both? [web, worker, or both]?"
  read server_type
fi

if [[ $server_type == web ]] || [[ $server_type == both ]]; then
  echo "Is the web server proxied (i.e. located behind a load balancer)? [true/false]?"
  read proxied
fi

if [[ $server_type != worker ]]; then
  echo "Do you need NodeJS and/or yarn for compiling assets? [true/false]"
  read yarn
fi

if [[ $server_type == worker ]] || [[ $server_type == both ]]; then
  echo "Do you want to install ClamAV? NOTE: Running ClamAV requires an extra 1.5~2GB RAM. [true/false]"
  read clamav
fi

if [[ $production == true ]]; then
  echo "Do you want install AWS monitoring tools (true/false)?"
  read aws_server
fi

# Install Packages

## PostgreSQL
if [[ $production == true ]]; then
  sudo apt install postgresql-client -y
else
  sudo apt install postgresql -y
fi

## Redis
if [[ $production == true ]]; then
  sudo apt install postgresql-tools -y
else
  sudo apt install redis -y
fi

## Nginx
if [[ $production == true ]]; then
  if [[ $server_type == web ]] || [[ $server_type == both ]]; then
    sudo apt install nginx -y
  fi
fi

## Logrotate
if [[ $server_type == production ]] ; then
  sudo apt install logrotate -y
fi

## Yarn
if [[ $yarn == true ]]; then
  sudo apt install nodejs -y
  sudo apt install yarnpkg -y
fi

## ClamAV
if [[ $clamav == true ]]; then
  sudo apt install clamav clamav-daemon -y
fi

# Install Ruby
. ./bin/provision_server_scripts/install_ruby

# Install Ruby Gem dependencies (PostgreSQL and ActiveStorage)
sudo apt install libpq-dev -y
sudo apt install libvips -y

# Install GeoIpUpdate
. ./bin/provision_server_scripts/install_geoipupdate

# Install AWS Cloudwatch
if [[ $aws_server == true ]]; then
  . ./bin/provision_server_scripts/install_aws_cloudwatch
fi

if [[ $production == true ]]; then
  # Prepare Capistrano Directory
  sudo mkdir /var/www/rails
  sudo chown -R ubuntu:ubuntu /var/www/rails
  mkdir /var/www/rails/shared
  mkdir /var/www/rails/shared/config
  mkdir /var/www/rails/shared/log

  # Generate self-signed certificate
  if [[ $proxied == true ]]; then
    . ./bin/provision_server_scripts/create_self_signed_certificate
  fi

  # Update config files
  . ./bin/provision_server_scripts/update_config_files

  # Enable services
  if [[ $server_type == web ]] || [[ $server_type == both ]]; then
    sudo systemctl enable rails
  fi

  if [[ $server_type == worker ]] || [[ $server_type == both ]]; then
    sudo systemctl enable sidekiq
  fi

  # Reload services
  sudo systemctl daemon-reload
fi
